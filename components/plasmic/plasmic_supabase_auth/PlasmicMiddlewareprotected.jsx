// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nT5KcU3zyMS2wxZ8Rc3Mjw
// Component: Wcc0Zz6wewUE
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useCurrentUser
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import NavigationBar from "../../NavigationBar"; // plasmic-import: 0W22cQAiPzr5/component
import { SupabaseProvider } from "../../SupabaseProvider"; // plasmic-import: ad33TL8OGqaY/codeComponent
import Button from "../../Button"; // plasmic-import: v-0F0jw1XWqT/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_plasmic_supabase_auth.module.css"; // plasmic-import: nT5KcU3zyMS2wxZ8Rc3Mjw/projectcss
import sty from "./PlasmicMiddlewareprotected.module.css"; // plasmic-import: Wcc0Zz6wewUE/css

createPlasmicElementProxy;

export const PlasmicMiddlewareprotected__VariantProps = new Array();

export const PlasmicMiddlewareprotected__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMiddlewareprotected__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            className={classNames("__wab_instance", sty.navigationBar)}
          />

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <h3
              data-plasmic-name={"h3"}
              data-plasmic-override={overrides.h3}
              className={classNames(
                projectcss.all,
                projectcss.h3,
                projectcss.__wab_text,
                sty.h3
              )}
            >
              {"Middleware protected"}
            </h3>
            <SupabaseProvider
              data-plasmic-name={"popularlikes"}
              data-plasmic-override={overrides.popularlikes}
              className={classNames("__wab_instance", sty.popularlikes)}
              columns={"*"}
              loading={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0L1Cc
                      )}
                    >
                      {"Loading..."}
                    </div>
                  )}
                </DataCtxReader__>
              }
              noData={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__v2VS0
                      )}
                    >
                      {"No data"}
                    </div>
                  )}
                </DataCtxReader__>
              }
              queryName={"popularlikes"}
              ref={ref => {
                $refs["popularlikes"] = ref;
              }}
              tableName={"popular"}
              uniqueIdentifierField={"id"}
              validating={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xt6Gu
                      )}
                    >
                      {"Validating..."}
                    </div>
                  )}
                </DataCtxReader__>
              }
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    data-plasmic-name={"freeBox"}
                    data-plasmic-override={overrides.freeBox}
                    className={classNames(projectcss.all, sty.freeBox)}
                  >
                    <h5
                      data-plasmic-name={"h5"}
                      data-plasmic-override={overrides.h5}
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $ctx.popularlikes.data[0].name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </h5>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xo13F
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $ctx.popularlikes.data[0].likes;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <Button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                      onClick={async event => {
                        const $steps = {};
                        $steps["runActionOnPopularlikes"] = true
                          ? (() => {
                              const actionArgs = {
                                tplRef: "popularlikes",
                                action: "runRpc",
                                args: [
                                  "increment_like_counter",
                                  (() => {
                                    try {
                                      return {
                                        _id: $ctx.popularlikes.data[0].id
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return (({ tplRef, action, args }) => {
                                return $refs?.[tplRef]?.[action]?.(
                                  ...(args ?? [])
                                );
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runActionOnPopularlikes"] != null &&
                          typeof $steps["runActionOnPopularlikes"] ===
                            "object" &&
                          typeof $steps["runActionOnPopularlikes"].then ===
                            "function"
                        ) {
                          $steps["runActionOnPopularlikes"] = await $steps[
                            "runActionOnPopularlikes"
                          ];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eL6PF
                        )}
                      >
                        {"+"}
                      </div>
                    </Button>
                  </div>
                )}
              </DataCtxReader__>
            </SupabaseProvider>
          </section>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navigationBar",
    "section",
    "h3",
    "popularlikes",
    "freeBox",
    "h5",
    "button"
  ],

  navigationBar: ["navigationBar"],
  section: ["section", "h3", "popularlikes", "freeBox", "h5", "button"],
  h3: ["h3"],
  popularlikes: ["popularlikes", "freeBox", "h5", "button"],
  freeBox: ["freeBox", "h5", "button"],
  h5: ["h5"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMiddlewareprotected__ArgProps,
          internalVariantPropNames: PlasmicMiddlewareprotected__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMiddlewareprotected__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMiddlewareprotected";
  } else {
    func.displayName = `PlasmicMiddlewareprotected.${nodeName}`;
  }
  return func;
}

export const PlasmicMiddlewareprotected = Object.assign(
  // Top-level PlasmicMiddlewareprotected renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    section: makeNodeComponent("section"),
    h3: makeNodeComponent("h3"),
    popularlikes: makeNodeComponent("popularlikes"),
    freeBox: makeNodeComponent("freeBox"),
    h5: makeNodeComponent("h5"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicMiddlewareprotected
    internalVariantProps: PlasmicMiddlewareprotected__VariantProps,
    internalArgProps: PlasmicMiddlewareprotected__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMiddlewareprotected;
/* prettier-ignore-end */
